# This example demonstrates the effect and use of the inbuilt "constraint safety" feature. This artificially alters
# constraints inside the core components, in order to (hopefully) catch infeasibilities during the optimization run,
# returning a (partially) valid solution as well as an indication where the infeasibility occurs.
# Comments indicate points of this model file that changed compared to the previous examples. All other elements are not
# explained/described anymore. See also: 03_basic_two_nodes.yaml
#
# What does the safety feature do?
# Looking at the result of this optimization (e.g. using `JuMP.solution_summary(model, verbose=true)`), we can see that
# one of the "aux" (auxiliary) variables is not at 0 anymore (here: `connection_flow_aux[conn]`). This indicates that
# an additional 0.25 capacity are needed on the Connection "conn" to make the model feasible. This is also indicated by
# the large increase in the objective value (now being > 2.5e14), which comes from the constraint safety cost.
# 
# Important: After optimizing the model, we can extract the "real" objective value from the solution using:
# `JuMP.value(model.ext[:objective])`. Keep in mind though, that this is the optimum that is achieved using the "fix"
# that the safety feature applies.

config:
  general:
    version:
      core: 2.6.3
  optimization:
    problem_type: LP
    snapshots:
      count: 4
    solver:
      name: highs
    # This tells IESopt to enable the constraint safety feature (which is currently off by default).
    soft_constraints:
      active: true
      # This parameterizes the cost of utilizing the safety feature. This should be much higher than other costs in the
      # objective function and defaults to 1e15. This, while being a rather safe number - meaning it most likely will not
      # interfere in any wrong way with your model - comes at the cost of numerical instability. This can be handled
      # "properly" by some solvers (like Gurobi) but will negatively impact others (like GLPK). To counter this we can
      # specify a lower cost coefficient here. Consider setting a lower tolerance for these solvers, for example call
      # `JuMP.set_optimizer_attribute(model, "tol_dj", 1e-12)` for GLPK.
      penalty: 1.0e9

carriers:
  electricity: {}
  gas: {}
  co2: {}

components:
  node1:
    type: Node
    carrier: electricity
  
  node2:
    type: Node
    carrier: electricity
    has_state: true
    state_lb: 0
    state_ub: 10

  # The capacity of the connection is reduced (from 5 to 1).
  conn:
    type: Connection
    capacity: 1
    node_from: node1
    node_to: node2
  
  # Furthermore, the wind availability factor is reduced to introduce an infeasibility.
  plant_wind:
    type: Unit
    outputs: {electricity: node2}
    conversion: ~ -> 1 electricity
    capacity: 10 out:electricity
    availability_factor: [0.4, 0.0, 0.4, 0.0]
  
  plant_gas:
    type: Unit
    inputs: {gas: gas_grid}
    outputs: {electricity: node1, co2: total_co2}
    conversion: 1 gas -> 0.4 electricity + 0.2 co2
    capacity: 10 out:electricity
  
  demand1:
    type: Profile
    carrier: electricity
    node_from: node1
    value: [3, 3, 3, 3]
  
  demand2:
    type: Profile
    carrier: electricity
    node_from: node2
    value: [4, 3, 1, 5]

  gas_grid:
    type: Node
    carrier: gas
  
  total_co2:
    type: Node
    carrier: co2

  create_gas:
    type: Profile
    carrier: gas
    node_to: gas_grid
    mode: create
    cost: 50.0
  
  co2_emissions:
    type: Profile
    carrier: co2
    node_from: total_co2
    mode: destroy
    cost: 100.0
